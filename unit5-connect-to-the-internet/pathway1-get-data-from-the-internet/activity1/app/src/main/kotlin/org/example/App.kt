/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlinx.coroutines.*
import kotlin.system.*

fun main() {
//    Asynchronous().main()
    Dispatcher().main()
}

class Synchronous() {
    fun main() {
        val time = measureTimeMillis {
            runBlocking {
                println("Weather forecast")
                printForecast()
                printTemperature()
            }
        }
        
        println("Execution time: ${time / 1000.0} seconds")
    }

    suspend fun printForecast() {
        delay(1000)
        println("Sunny")
    }

    suspend fun printTemperature() {
        delay(1000)
        println("30\u00b0C")
    }
}

class Asynchronous() {
    fun main() {
        val time = measureTimeMillis {
            runBlocking {
                println("Weather forecast")
                println(getWeatherReport())
                println("Have a good day!")
            }
        }
        println("Execution time: ${time / 1000.0} seconds")
    }

    suspend fun getWeatherReport() = coroutineScope {
        val forecast = async { getForecast() }
        val temperature = async { getTemperature() }

        delay(200)

        temperature.cancel()

        "${forecast.await()}"
    }

    suspend fun getForecast(): String {
        delay(1000)
        return "Sunny"
    }

    suspend fun getTemperature(): String {
        delay(1000)
        return "30\u00b0C"
    }
}

class Dispatcher() {
    fun main() {
        runBlocking {
            println("${Thread.currentThread().name} - runBlocking function")
            launch {
                println("${Thread.currentThread().name} - launch function")
                withContext(Dispatchers.Default) {
                    println("${Thread.currentThread().name} - withContext function")
                    delay(1000)
                    println("10 results found.")
                }
                println("${Thread.currentThread().name} - end of launch function")
            }
            println("Loading...")
        }
    }
}